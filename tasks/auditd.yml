
# What architecture are we on?
#
- name: Set architecture for audit shadow tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other user/group modification audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-k audit_rules_usergroup_modification$"
    patterns: "*.rules"
  register: find_shadow

- name: If existing user/group modification ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_shadow.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_shadow.files | map(attribute='path') | list | first }}"
  when: find_shadow.matched > 0

- name: Inserts/replaces the shadow rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-w /etc/shadow -p wa -k audit_rules_usergroup_modification"
    create: yes
  tags:
    - audit_rules_usergroup_modification_shadow
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80431-0
    - NIST-800-53-AC-2(4)
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030873

#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the shadow rule in /etc/audit/audit.rules
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-w /etc/shadow -p wa -k audit_rules_usergroup_modification"
  tags:
    - audit_rules_usergroup_modification_shadow
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80431-0
    - NIST-800-53-AC-2(4)
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030873


#
# What architecture are we on?
#
- name: Set architecture for audit opasswd tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other user/group modification audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-k audit_rules_usergroup_modification$"
    patterns: "*.rules"
  register: find_opasswd

- name: If existing user/group modification ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_opasswd.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_opasswd.files | map(attribute='path') | list | first }}"
  when: find_opasswd.matched > 0

- name: Inserts/replaces the opasswd rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-w /etc/security/opasswd -p wa -k audit_rules_usergroup_modification"
    create: yes
  tags:
    - audit_rules_usergroup_modification_opasswd
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80430-2
    - NIST-800-53-AC-2(4)
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030874

#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the opasswd rule in /etc/audit/audit.rules
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-w /etc/security/opasswd -p wa -k audit_rules_usergroup_modification"
  tags:
    - audit_rules_usergroup_modification_opasswd
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80430-2
    - NIST-800-53-AC-2(4)
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030874

#
# What architecture are we on?
#
- name: Set architecture for audit gshadow tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other user/group modification audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-k audit_rules_usergroup_modification$"
    patterns: "*.rules"
  register: find_gshadow

- name: If existing user/group modification ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_gshadow.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_gshadow.files | map(attribute='path') | list | first }}"
  when: find_gshadow.matched > 0

- name: Inserts/replaces the gshadow rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-w /etc/gshadow -p wa -k audit_rules_usergroup_modification"
    create: yes
  tags:
    - audit_rules_usergroup_modification_gshadow
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80432-8
    - NIST-800-53-AC-2(4)
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030872

#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the gshadow rule in /etc/audit/audit.rules
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-w /etc/gshadow -p wa -k audit_rules_usergroup_modification"
  tags:
    - audit_rules_usergroup_modification_gshadow
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80432-8
    - NIST-800-53-AC-2(4)
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030872

#
# What architecture are we on?
#
- name: Set architecture for audit passwd tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other user/group modification audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-k audit_rules_usergroup_modification$"
    patterns: "*.rules"
  register: find_passwd

- name: If existing user/group modification ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_passwd.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_passwd.files | map(attribute='path') | list | first }}"
  when: find_passwd.matched > 0

- name: Inserts/replaces the passwd rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-w /etc/passwd -p wa -k audit_rules_usergroup_modification"
    create: yes
  tags:
    - audit_rules_usergroup_modification_passwd
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80435-1
    - NIST-800-53-AC-2(4)
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030870

#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the passwd rule in /etc/audit/audit.rules
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-w /etc/passwd -p wa -k audit_rules_usergroup_modification"
  tags:
    - audit_rules_usergroup_modification_passwd
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80435-1
    - NIST-800-53-AC-2(4)
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030870

#
# What architecture are we on?
#
- name: Set architecture for audit group tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other user/group modification audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-k audit_rules_usergroup_modification$"
    patterns: "*.rules"
  register: find_group

- name: If existing user/group modification ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_group.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_group.files | map(attribute='path') | list | first }}"
  when: find_group.matched > 0

- name: Inserts/replaces the group rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-w /etc/group -p wa -k audit_rules_usergroup_modification"
    create: yes
  tags:
    - audit_rules_usergroup_modification_group
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80433-6
    - NIST-800-53-AC-2(4)
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030871

#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the group rule in /etc/audit/audit.rules
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-w /etc/group -p wa -k audit_rules_usergroup_modification"
  tags:
    - audit_rules_usergroup_modification_group
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80433-6
    - NIST-800-53-AC-2(4)
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030871



#### Configure <tt>auditd</tt> Data Retention

##### Configure auditd admin_space_left Action on Low Disk Space ######
- name: XCCDF Value var_auditd_admin_space_left_action # promote to variable
  set_fact:
    var_auditd_admin_space_left_action: !!str |-
        single
  tags:
    - always

- name: Configure auditd admin_space_left Action on Low Disk Space
  lineinfile:
    dest: /etc/audit/auditd.conf
    line: "admin_space_left_action = {{ var_auditd_admin_space_left_action }}"
    regexp: "^admin_space_left_action*"
  notify: reload auditd
  tags:
    - auditd_data_retention_admin_space_left_action
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27370-6
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-4
    - NIST-800-53-AU-5(b)
    - NIST-800-53-IR-5
    - NIST-800-171-3.3.1
    - PCI-DSS-Req-10.7
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030340
##### Configure auditd admin_space_left Action on Low Disk Space ######

#### Configure <tt>auditd</tt> Rules for Comprehensive Auditing
- name: Enable service auditd
  service:
    name: "{{item}}"
    enabled: "yes"
    state: "started"
  with_items:
    - auditd
  tags:
    - service_auditd_enabled
    - high_severity
    - enable_strategy
    - low_complexity
    - low_disruption
    - CCE-27407-6
    - NIST-800-53-AU-3
    - NIST-800-53-AC-17(1)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-10
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-AU-14(1)
    - NIST-800-53-IR-5
    - NIST-800-171-3.3.1
    - NIST-800-171-3.3.2
    - NIST-800-171-3.3.6
    - PCI-DSS-Req-10
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030000
##### Record Events that Modify the System's Discretionary Access Controls

###### Record Events that Modify the System's Discretionary Access Controls - fchown #########
#
# What architecture are we on?
#
- name: Set architecture for audit fchown tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_fchown

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_fchown.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_fchown.files | map(attribute='path') | list | first }}"
  when: find_fchown.matched > 0

- name: Inserts/replaces the fchown rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S fchown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  tags:
    - audit_rules_dac_modification_fchown
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27356-5
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030380

- name: Inserts/replaces the fchown rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S fchown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_fchown
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27356-5
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030380
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the fchown rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S fchown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  tags:
    - audit_rules_dac_modification_fchown
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27356-5
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030380

- name: Inserts/replaces the fchown rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S fchown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_fchown
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27356-5
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030380
###### Record Events that Modify the System's Discretionary Access Controls - fchown #########





###### Record Events that Modify the System's Discretionary Access Controls - setxattr #########
#
# What architecture are we on?
#
- name: Set architecture for audit setxattr tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_setxattr

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_setxattr.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_setxattr.files | map(attribute='path') | list | first }}"
  when: find_setxattr.matched > 0

- name: Inserts/replaces the setxattr rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S setxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  tags:
    - audit_rules_dac_modification_setxattr
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27213-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030440

- name: Inserts/replaces the setxattr rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S setxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_setxattr
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27213-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030440
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the setxattr rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S setxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  tags:
    - audit_rules_dac_modification_setxattr
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27213-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030440

- name: Inserts/replaces the setxattr rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S setxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_setxattr
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27213-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030440

###### Record Events that Modify the System's Discretionary Access Controls - setxattr #########






###### Record Events that Modify the System's Discretionary Access Controls - fsetxattr #########
#
# What architecture are we on?
#
- name: Set architecture for audit fsetxattr tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_fsetxattr

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_fsetxattr.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_fsetxattr.files | map(attribute='path') | list | first }}"
  when: find_fsetxattr.matched > 0

- name: Inserts/replaces the fsetxattr rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S fsetxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  tags:
    - audit_rules_dac_modification_fsetxattr
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27389-6
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030450

- name: Inserts/replaces the fsetxattr rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S fsetxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_fsetxattr
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27389-6
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030450
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the fsetxattr rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S fsetxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  tags:
    - audit_rules_dac_modification_fsetxattr
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27389-6
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030450

- name: Inserts/replaces the fsetxattr rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S fsetxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_fsetxattr
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27389-6
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030450
###### Record Events that Modify the System's Discretionary Access Controls - fsetxattr #########





###### Record Events that Modify the System's Discretionary Access Controls - chown  #########
#
# What architecture are we on?
#
- name: Set architecture for audit chown tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_chown

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_chown.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_chown.files | map(attribute='path') | list | first }}"
  when: find_chown.matched > 0

- name: Inserts/replaces the chown rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S chown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  tags:
    - audit_rules_dac_modification_chown
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27364-9
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030370

- name: Inserts/replaces the chown rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S chown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_chown
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27364-9
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030370
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the chown rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S chown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  tags:
    - audit_rules_dac_modification_chown
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27364-9
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030370

- name: Inserts/replaces the chown rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S chown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_chown
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27364-9
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030370

###### Record Events that Modify the System's Discretionary Access Controls - chown  #########




###### Record Events that Modify the System's Discretionary Access Controls - fchownat  #########
#
# What architecture are we on?
#
- name: Set architecture for audit fchownat tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_fchownat

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_fchownat.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_fchownat.files | map(attribute='path') | list | first }}"
  when: find_fchownat.matched > 0

- name: Inserts/replaces the fchownat rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S fchownat -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  tags:
    - audit_rules_dac_modification_fchownat
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27387-0
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030400

- name: Inserts/replaces the fchownat rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S fchownat -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_fchownat
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27387-0
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030400
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the fchownat rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S fchownat -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  tags:
    - audit_rules_dac_modification_fchownat
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27387-0
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030400

- name: Inserts/replaces the fchownat rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S fchownat -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_fchownat
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27387-0
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030400
###### Record Events that Modify the System's Discretionary Access Controls - fchownat  #########






###### Record Events that Modify the System's Discretionary Access Controls - lchown  #########
#
# What architecture are we on?
#
- name: Set architecture for audit lchown tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_lchown

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_lchown.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_lchown.files | map(attribute='path') | list | first }}"
  when: find_lchown.matched > 0

- name: Inserts/replaces the lchown rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S lchown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  tags:
    - audit_rules_dac_modification_lchown
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27083-5
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030390

- name: Inserts/replaces the lchown rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S lchown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_lchown
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27083-5
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030390
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the lchown rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S lchown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  tags:
    - audit_rules_dac_modification_lchown
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27083-5
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030390

- name: Inserts/replaces the lchown rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S lchown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_lchown
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27083-5
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030390
###### Record Events that Modify the System's Discretionary Access Controls - lchown  #########






###### Record Events that Modify the System's Discretionary Access Controls - chmod  #########
#
# What architecture are we on?
#
- name: Set architecture for audit chmod tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_chmod

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_chmod.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_chmod.files | map(attribute='path') | list | first }}"
  when: find_chmod.matched > 0

- name: Inserts/replaces the chmod rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S chmod -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  tags:
    - audit_rules_dac_modification_chmod
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27339-1
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030410

- name: Inserts/replaces the chmod rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S chmod -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_chmod
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27339-1
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030410
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the chmod rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S chmod -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  tags:
    - audit_rules_dac_modification_chmod
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27339-1
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030410

- name: Inserts/replaces the chmod rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S chmod -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_chmod
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27339-1
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030410
###### Record Events that Modify the System's Discretionary Access Controls - chmod  #########






###### Record Events that Modify the System's Discretionary Access Controls - removexattr  #########
#
# What architecture are we on?
#
- name: Set architecture for audit removexattr tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_removexattr

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_removexattr.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_removexattr.files | map(attribute='path') | list | first }}"
  when: find_removexattr.matched > 0

- name: Inserts/replaces the removexattr rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S removexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  tags:
    - audit_rules_dac_modification_removexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27367-2
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030470

- name: Inserts/replaces the removexattr rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S removexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_removexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27367-2
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030470
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the removexattr rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S removexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  tags:
    - audit_rules_dac_modification_removexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27367-2
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030470

- name: Inserts/replaces the removexattr rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S removexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_removexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27367-2
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030470
###### Record Events that Modify the System's Discretionary Access Controls - removexattr  #########






###### Record Events that Modify the System's Discretionary Access Controls - fremovexattr  #########
#
# What architecture are we on?
#
- name: Set architecture for audit fremovexattr tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_fremovexattr

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_fremovexattr.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_fremovexattr.files | map(attribute='path') | list | first }}"
  when: find_fremovexattr.matched > 0

- name: Inserts/replaces the fremovexattr rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S fremovexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  tags:
    - audit_rules_dac_modification_fremovexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27353-2
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030480

- name: Inserts/replaces the fremovexattr rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S fremovexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_fremovexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27353-2
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030480
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the fremovexattr rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S fremovexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  tags:
    - audit_rules_dac_modification_fremovexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27353-2
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030480

- name: Inserts/replaces the fremovexattr rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S fremovexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_fremovexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27353-2
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030480
###### Record Events that Modify the System's Discretionary Access Controls - fremovexattr  #########








###### Record Events that Modify the System's Discretionary Access Controls - lsetxattr  #########
#
# What architecture are we on?
#
- name: Set architecture for audit lsetxattr tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_lsetxattr

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_lsetxattr.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_lsetxattr.files | map(attribute='path') | list | first }}"
  when: find_lsetxattr.matched > 0

- name: Inserts/replaces the lsetxattr rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S lsetxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  tags:
    - audit_rules_dac_modification_lsetxattr
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27280-7
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030460

- name: Inserts/replaces the lsetxattr rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S lsetxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_lsetxattr
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27280-7
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030460
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the lsetxattr rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S lsetxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  tags:
    - audit_rules_dac_modification_lsetxattr
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27280-7
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030460

- name: Inserts/replaces the lsetxattr rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S lsetxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_lsetxattr
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27280-7
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030460
###### Record Events that Modify the System's Discretionary Access Controls - lsetxattr  #########






###### Record Events that Modify the System's Discretionary Access Controls - fchmod  #########
#
# What architecture are we on?
#
- name: Set architecture for audit fchmod tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_fchmod

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_fchmod.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_fchmod.files | map(attribute='path') | list | first }}"
  when: find_fchmod.matched > 0

- name: Inserts/replaces the fchmod rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S fchmod -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  tags:
    - audit_rules_dac_modification_fchmod
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27393-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030420

- name: Inserts/replaces the fchmod rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S fchmod -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_fchmod
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27393-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030420
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the fchmod rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S fchmod -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  tags:
    - audit_rules_dac_modification_fchmod
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27393-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030420

- name: Inserts/replaces the fchmod rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S fchmod -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_fchmod
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27393-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030420
###### Record Events that Modify the System's Discretionary Access Controls - fchmod  #########







###### Record Events that Modify the System's Discretionary Access Controls - lremovexattr #########
#
# What architecture are we on?
#
- name: Set architecture for audit lremovexattr tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_lremovexattr

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_lremovexattr.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_lremovexattr.files | map(attribute='path') | list | first }}"
  when: find_lremovexattr.matched > 0

- name: Inserts/replaces the lremovexattr rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S lremovexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  tags:
    - audit_rules_dac_modification_lremovexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27410-0
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030490

- name: Inserts/replaces the lremovexattr rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S lremovexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_lremovexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27410-0
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030490
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the lremovexattr rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S lremovexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  tags:
    - audit_rules_dac_modification_lremovexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27410-0
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030490

- name: Inserts/replaces the lremovexattr rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S lremovexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_lremovexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27410-0
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030490
###### Record Events that Modify the System's Discretionary Access Controls - lremovexattr #########






###### Record Events that Modify the System's Discretionary Access Controls - fchmodat #########

#
# What architecture are we on?
#
- name: Set architecture for audit fchmodat tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_fchmodat

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_fchmodat.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_fchmodat.files | map(attribute='path') | list | first }}"
  when: find_fchmodat.matched > 0

- name: Inserts/replaces the fchmodat rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S fchmodat -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  tags:
    - audit_rules_dac_modification_fchmodat
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27388-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030430

- name: Inserts/replaces the fchmodat rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S fchmodat -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_fchmodat
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27388-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030430
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the fchmodat rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S fchmodat -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  tags:
    - audit_rules_dac_modification_fchmodat
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27388-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030430

- name: Inserts/replaces the fchmodat rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S fchmodat -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_fchmodat
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27388-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.5.5
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030430

###### Record Events that Modify the System's Discretionary Access Controls - fchmodat #########






##### Record File Deletion Events by User
###### Ensure auditd Collects File Deletion Events by User - rmdir   #########
# What architecture are we on?
#
- name: "[CUSTOM] Set architecture for audit rmdir tasks"
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=delete$"
    patterns: "*.rules"
  register: find_delete

- name: "[CUSTOM] If existing DAC ruleset not found, use /etc/audit/rules.d/deletion.rules as the recipient for the rule"
  set_fact:
    all_files:
      - /etc/audit/rules.d/deletion.rules
  when: find_delete.matched == 0

- name: "[CUSTOM] Use matched file as the recipient for the rule"
  set_fact:
    all_files:
      - "{{ find_delete.files | map(attribute='path') | list | first }}"
  when: find_delete.matched > 0

- name: "[CUSTOM] Inserts/replaces the rmdir rule in rules.d when on x86"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S rmdir -F auid>=1000 -F auid!=4294967295 -F key=delete"
    create: yes
  tags:
    - audit_rules_dac_deletion_rmdir
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the rmdir rule in rules.d when on x86_64"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S rmdir -F auid>=1000 -F auid!=4294967295 -F key=delete"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_deletion_rmdir
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: "[CUSTOM] Inserts/replaces the rmdir rule in /etc/audit/audit.rules when on x86"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S rmdir -F auid>=1000 -F auid!=4294967295 -F key=delete"
  tags:
    - audit_rules_dac_deletion_rmdir
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the rmdir rule in audit.rules when on x86_64"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S rmdir -F auid>=1000 -F auid!=4294967295 -F key=delete"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_deletion_rmdir
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
###### Ensure auditd Collects File Deletion Events by User - rmdir   #########





###### Ensure auditd Collects File Deletion Events by User - unlinkat    #########
#
# What architecture are we on?
#
- name: "[CUSTOM] Set architecture for audit unlinkat tasks"
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: "[CUSTOM] Search /etc/audit/rules.d for other DAC audit rules"
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=delete$"
    patterns: "*.rules"
  register: find_delete

- name: "[CUSTOM] If existing DAC ruleset not found, use /etc/audit/rules.d/deletion.rules as the recipient for the rule"
  set_fact:
    all_files:
      - /etc/audit/rules.d/deletion.rules
  when: find_delete.matched == 0

- name: "[CUSTOM] Use matched file as the recipient for the rule"
  set_fact:
    all_files:
      - "{{ find_delete.files | map(attribute='path') | list | first }}"
  when: find_delete.matched > 0

- name: "[CUSTOM] Inserts/replaces the unlinkat rule in rules.d when on x86"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S unlinkat -F auid>=1000 -F auid!=4294967295 -F key=delete"
    create: yes
  tags:
    - audit_rules_dac_deletion_unlink
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the unlinkat rule in rules.d when on x86_64"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S unlinkat -F auid>=1000 -F auid!=4294967295 -F key=delete"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_deletion_unlinkat
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: "[CUSTOM] Inserts/replaces the unlinkat rule in /etc/audit/audit.rules when on x86"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S unlinkat -F auid>=1000 -F auid!=4294967295 -F key=delete"
  tags:
    - audit_rules_dac_modification_unlinkat
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the unlinkat rule in audit.rules when on x86_64"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S unlinkat -F auid>=1000 -F auid!=4294967295 -F key=delete"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_deletion_unlinkat
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
###### Ensure auditd Collects File Deletion Events by User - unlinkat    #########





###### Ensure auditd Collects File Deletion Events by User - rename    #########
#
# What architecture are we on?
#
- name: "[CUSTOM] Set architecture for audit rename tasks"
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: "[CUSTOM] Search /etc/audit/rules.d for other DAC audit rules"
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=delete$"
    patterns: "*.rules"
  register: find_delete

- name: "[CUSTOM] If existing DAC ruleset not found, use /etc/audit/rules.d/deletion.rules as the recipient for the rule"
  set_fact:
    all_files:
      - /etc/audit/rules.d/deletion.rules
  when: find_delete.matched == 0

- name: "[CUSTOM] Use matched file as the recipient for the rule"
  set_fact:
    all_files:
      - "{{ find_delete.files | map(attribute='path') | list | first }}"
  when: find_delete.matched > 0

- name: "[CUSTOM] Inserts/replaces the rename rule in rules.d when on x86"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S rename -F auid>=1000 -F auid!=4294967295 -F key=delete"
    create: yes
  tags:
    - audit_rules_dac_deletion_unlink
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the rename rule in rules.d when on x86_64"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S rename -F auid>=1000 -F auid!=4294967295 -F key=delete"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_deletion_rename
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: "[CUSTOM] Inserts/replaces the rename rule in /etc/audit/audit.rules when on x86"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S rename -F auid>=1000 -F auid!=4294967295 -F key=delete"
  tags:
    - audit_rules_dac_deletion_rename
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the rename rule in audit.rules when on x86_64"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S rename -F auid>=1000 -F auid!=4294967295 -F key=delete"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_deletion_rename
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
###### Ensure auditd Collects File Deletion Events by User - rename    #########






###### Ensure auditd Collects File Deletion Events by User - renameat    #########
#
# What architecture are we on?
#
- name: "[CUSTOM] Set architecture for audit renameat tasks"
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: "[CUSTOM] Search /etc/audit/rules.d for other DAC audit rules"
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=delete$"
    patterns: "*.rules"
  register: find_delete

- name: "[CUSTOM] If existing DAC ruleset not found, use /etc/audit/rules.d/deletion.rules as the recipient for the rule"
  set_fact:
    all_files:
      - /etc/audit/rules.d/deletion.rules
  when: find_delete.matched == 0

- name: "[CUSTOM] Use matched file as the recipient for the rule"
  set_fact:
    all_files:
      - "{{ find_delete.files | map(attribute='path') | list | first }}"
  when: find_delete.matched > 0

- name: "[CUSTOM] Inserts/replaces the renameat rule in rules.d when on x86"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S renameat -F auid>=1000 -F auid!=4294967295 -F key=delete"
    create: yes
  tags:
    - audit_rules_dac_deletion_unlink
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the renameat rule in rules.d when on x86_64"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S renameat -F auid>=1000 -F auid!=4294967295 -F key=delete"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_deletion_renameat
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: "[CUSTOM] Inserts/replaces the renameat rule in /etc/audit/audit.rules when on x86"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S renameat -F auid>=1000 -F auid!=4294967295 -F key=delete"
  tags:
    - audit_rules_dac_deletion_renameat
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the renameat rule in audit.rules when on x86_64"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S renameat -F auid>=1000 -F auid!=4294967295 -F key=delete"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_deletion_renameat
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
###### Ensure auditd Collects File Deletion Events by User - renameat    #########






###### Ensure auditd Collects File Deletion Events by User - unlink   #########
# What architecture are we on?
#
- name: "[CUSTOM] Set architecture for audit unlink tasks"
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: "[CUSTOM] Search /etc/audit/rules.d for other DAC audit rules"
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=delete$"
    patterns: "*.rules"
  register: find_delete

- name: "[CUSTOM] If existing DAC ruleset not found, use /etc/audit/rules.d/deletion.rules as the recipient for the rule"
  set_fact:
    all_files:
      - /etc/audit/rules.d/deletion.rules
  when: find_delete.matched == 0

- name: "[CUSTOM] Use matched file as the recipient for the rule"
  set_fact:
    all_files:
      - "{{ find_delete.files | map(attribute='path') | list | first }}"
  when: find_delete.matched > 0

- name: "[CUSTOM] Inserts/replaces the unlink rule in rules.d when on x86"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S unlink -F auid>=1000 -F auid!=4294967295 -F key=delete"
    create: yes
  tags:
    - audit_rules_dac_deletion_unlink
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the unlink rule in rules.d when on x86_64"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S unlink -F auid>=1000 -F auid!=4294967295 -F key=delete"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_deletion_unlink
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: "[CUSTOM] Inserts/replaces the unlink rule in /etc/audit/audit.rules when on x86"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S unlink -F auid>=1000 -F auid!=4294967295 -F key=delete"
  tags:
    - audit_rules_dac_deletion_unlink
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the unlink rule in audit.rules when on x86_64"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S unlink -F auid>=1000 -F auid!=4294967295 -F key=delete"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_deletion_unlink
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
###### Ensure auditd Collects File Deletion Events by User - unlink   #########



##### Records Events that Modify Date and Time Information

###### Records Events that Modify Date and Time Information - stime   #########
# What architecture are we on?
#
- name: "[CUSTOM] Set architecture for audit stime tasks"
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=audit_time_rules$"
    patterns: "*.rules"
  register: find_delete

- name: "[CUSTOM] If existing DAC ruleset not found, use /etc/audit/rules.d/time.rules as the recipient for the rule"
  set_fact:
    all_files:
      - /etc/audit/rules.d/time.rules
  when: find_delete.matched == 0

- name: "[CUSTOM] Use matched file as the recipient for the rule"
  set_fact:
    all_files:
      - "{{ find_delete.files | map(attribute='path') | list | first }}"
  when: find_delete.matched > 0

- name: "[CUSTOM] Inserts/replaces the stime rule in rules.d when on x86"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S stime -F auid>=1000 -F auid!=4294967295 -F key=audit_time_rules"
    create: yes
  tags:
    - audit_rules_dac_modification_stime
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the stime rule in rules.d when on x86_64"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S stime -F auid>=1000 -F auid!=4294967295 -F key=audit_time_rules"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_stime
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: "[CUSTOM] Inserts/replaces the stime rule in /etc/audit/audit.rules when on x86"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S stime -F auid>=1000 -F auid!=4294967295 -F key=audit_time_rules"
  tags:
    - audit_rules_dac_modification_stime
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the stime rule in audit.rules when on x86_64"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S stime -F auid>=1000 -F auid!=4294967295 -F key=audit_time_rules"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_stime
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
###### Records Events that Modify Date and Time Information - stime   #########




###### Records Events that Modify Date and Time Information - settimeofday  #########
# What architecture are we on?
#
- name: "[CUSTOM] Set architecture for audit settimeofday tasks"
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: "[CUSTOM] Search /etc/audit/rules.d for other DAC audit rules"
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=audit_time_rules$"
    patterns: "*.rules"
  register: find_delete

- name: "[CUSTOM] If existing DAC ruleset not found, use /etc/audit/rules.d/time.rules as the recipient for the rule"
  set_fact:
    all_files:
      - /etc/audit/rules.d/time.rules
  when: find_delete.matched == 0

- name: "[CUSTOM] Use matched file as the recipient for the rule"
  set_fact:
    all_files:
      - "{{ find_delete.files | map(attribute='path') | list | first }}"
  when: find_delete.matched > 0

- name: "[CUSTOM] Inserts/replaces the settimeofday rule in rules.d when on x86"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S settimeofday -F auid>=1000 -F auid!=4294967295 -F key=audit_time_rules"
    create: yes
  tags:
    - audit_rules_dac_modification_settimeofday
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the settimeofday rule in rules.d when on x86_64"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S settimeofday -F auid>=1000 -F auid!=4294967295 -F key=audit_time_rules"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_settimeofday
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: "[CUSTOM] Inserts/replaces the settimeofday rule in /etc/audit/audit.rules when on x86"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S settimeofday -F auid>=1000 -F auid!=4294967295 -F key=audit_time_rules"
  tags:
    - audit_rules_dac_modification_settimeofday
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the settimeofday rule in audit.rules when on x86_64"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S settimeofday -F auid>=1000 -F auid!=4294967295 -F key=audit_time_rules"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_settimeofday
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
###### Records Events that Modify Date and Time Information - settimeofday  #########




###### Records Events that Modify Date and Time Information - localtime  #########
#
# What architecture are we on?
#
- name: "[CUSTOM] Set architecture for audit ftruncate tasks"
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: "[CUSTOM] Search /etc/audit/rules.d for other DAC audit rules"
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-k audit_time_rules$"
    patterns: "*.rules"
  register: find_ftruncate

- name: "[CUSTOM] If existing DAC ruleset not found, use /etc/audit/rules.d/time.rules as the recipient for the rule"
  set_fact:
    all_files:
      - /etc/audit/rules.d/time.rules
  when: find_ftruncate.matched == 0

- name: "[CUSTOM] Use matched file as the recipient for the rule"
  set_fact:
    all_files:
      - "{{ find_ftruncate.files | map(attribute='path') | list | first }}"
  when: find_ftruncate.matched > 0

- name: "[CUSTOM] Inserts/replaces the ftruncate rule in rules.d when on x86"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-w /etc/localtime -p wa -k audit_time_rules"
  tags:
    - audit_rules_dac_modification_localtime
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the ftruncate rule in rules.d when on x86_64"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-w /etc/localtime -p wa -k audit_time_rules"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_localtime
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: "[CUSTOM] Inserts/replaces the ftruncate rule in /etc/audit/audit.rules when on x86"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-w /etc/localtime -p wa -k audit_time_rules"
  tags:
    - audit_rules_dac_modification_localtime
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the ftruncate rule in audit.rules when on x86_64"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-w /etc/localtime -p wa -k audit_time_rules"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_localtime
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
###### Records Events that Modify Date and Time Information - localtime  #########







###### Records Events that Modify Date and Time Information - clock_settime  #########
# What architecture are we on?
#
- name: "[CUSTOM] Set architecture for audit stime tasks"
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: "[CUSTOM] Search /etc/audit/rules.d for other DAC audit rules"
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=time-change$"
    patterns: "*.rules"
  register: find_time_change

- name: "[CUSTOM] If existing DAC ruleset not found, use /etc/audit/rules.d/time.rules as the recipient for the rule"
  set_fact:
    all_files:
      - /etc/audit/rules.d/time.rules
  when: find_time_change.matched == 0

- name: "[CUSTOM] Use matched file as the recipient for the rule"
  set_fact:
    all_files:
      - "{{ find_time_change.files | map(attribute='path') | list | first }}"
  when: find_time_change.matched > 0

- name: "[CUSTOM] Inserts/replaces the clock_settime rule in rules.d when on x86"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S clock_settime -F a0=0x0 -F key=time-change"
    create: yes
  tags:
    - audit_rules_dac_modification_clock_settime
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the clock_settime rule in rules.d when on x86_64"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S clock_settime -F a0=0x0 -F key=time-change"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_clock_settime
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the clock_settime rule in /etc/audit/audit.rules when on x86"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S clock_settime -F a0=0x0 -F key=time-change"
  tags:
    - audit_rules_dac_modification_clock_settime
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation


- name: "[CUSTOM] Inserts/replaces the clock_settime rule in audit.rules when on x86_64"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S clock_settime -F a0=0x0 -F key=time-change"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_clock_settime
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
###### Records Events that Modify Date and Time Information - clock_settime  #########






###### Records Events that Modify Date and Time Information - adjtimex #########
# What architecture are we on?
#
- name: "[CUSTOM] Set architecture for audit adjtimex tasks"
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: "[CUSTOM] Search /etc/audit/rules.d for other DAC audit rules"
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=audit_time_rules$"
    patterns: "*.rules"
  register: find_time_rule

- name: "[CUSTOM] If existing DAC ruleset not found, use /etc/audit/rules.d/time.rules as the recipient for the rule"
  set_fact:
    all_files:
      - /etc/audit/rules.d/time.rules
  when: find_time_rule.matched == 0

- name: "[CUSTOM] Use matched file as the recipient for the rule"
  set_fact:
    all_files:
      - "{{ find_time_rule.files | map(attribute='path') | list | first }}"
  when: find_time_rule.matched > 0

- name: "[CUSTOM] Inserts/replaces the adjtimex rule in rules.d when on x86"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b32 -S adjtimex -F a0=0x0 -F key=audit_time_rules"
    create: yes
  tags:
    - audit_rules_dac_modification_adjtimex
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the adjtimex rule in rules.d when on x86_64"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-a always,exit -F arch=b64 -S adjtimex -F a0=0x0 -F key=audit_time_rules"
    create: yes
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_adjtimex
    - unknown_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the adjtimex rule in /etc/audit/audit.rules when on x86"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S adjtimex -F a0=0x0 -F key=audit_time_rules"
  tags:
    - audit_rules_dac_modification_adjtimex
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation


- name: "[CUSTOM] Inserts/replaces the adjtimex rule in audit.rules when on x86_64"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S adjtimex -F a0=0x0 -F key=audit_time_rules"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_modification_adjtimex
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
###### Records Events that Modify Date and Time Information - adjtimex #########








###### Record Unauthorized Access Attempts to Files (unsuccessful)  - truncate #########
#
# What architecture are we on?
#
- name: Set architecture for audit truncate tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_truncate

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/access.rules
  when: find_truncate.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_truncate.files | map(attribute='path') | list | first }}"
  when: find_truncate.matched > 0

- name: Inserts/replaces the truncate rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b32 -S truncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S truncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_truncate
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80389-0
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030540

- name: Inserts/replaces the truncate rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S truncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S truncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_truncate
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80389-0
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030540
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the truncate rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S truncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S truncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_truncate
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80389-0
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030540

- name: Inserts/replaces the truncate rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S truncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S truncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_truncate
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80389-0
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030540
###### Record Unauthorized Access Attempts to Files (unsuccessful)  - truncate #########







###### Record Unauthorized Access Attempts to Files (unsuccessful)  - creat  #########
#
# What architecture are we on?
#
- name: Set architecture for audit creat tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_creat

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/access.rules
  when: find_creat.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_creat.files | map(attribute='path') | list | first }}"
  when: find_creat.matched > 0

- name: Inserts/replaces the creat rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b32 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_creat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80385-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030500

- name: Inserts/replaces the creat rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_creat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80385-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030500
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the creat rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_creat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80385-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030500

- name: Inserts/replaces the creat rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_creat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80385-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030500
###### Record Unauthorized Access Attempts to Files (unsuccessful)  - creat  #########






###### Record Unauthorized Access Attempts to Files (unsuccessful)  - open  #########
#
# What architecture are we on?
#
- name: Set architecture for audit open tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_open

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/access.rules
  when: find_open.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_open.files | map(attribute='path') | list | first }}"
  when: find_open.matched > 0

- name: Inserts/replaces the open rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b32 -S open -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S open -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_open
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80386-6
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030510

- name: Inserts/replaces the open rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S open -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S open -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_open
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80386-6
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030510
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the open rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S open -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S open -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_open
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80386-6
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030510

- name: Inserts/replaces the open rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S open -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S open -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_open
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80386-6
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030510
###### Record Unauthorized Access Attempts to Files (unsuccessful)  - open  #########







###### Record Unauthorized Access Attempts to Files (unsuccessful)  - open_by_handle_at  #########
#
# What architecture are we on?
#
- name: Set architecture for audit open_by_handle_at tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_open_by_handle_at

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/access.rules
  when: find_open_by_handle_at.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_open_by_handle_at.files | map(attribute='path') | list | first }}"
  when: find_open_by_handle_at.matched > 0

- name: Inserts/replaces the open_by_handle_at rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b32 -S open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_open_by_handle_at
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80388-2
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030530

- name: Inserts/replaces the open_by_handle_at rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_open_by_handle_at
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80388-2
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030530
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the open_by_handle_at rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_open_by_handle_at
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80388-2
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030530

- name: Inserts/replaces the open_by_handle_at rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_open_by_handle_at
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80388-2
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030530
###### Record Unauthorized Access Attempts to Files (unsuccessful)  - open_by_handle_at  #########







###### Record Unauthorized Access Attempts to Files (unsuccessful)  - ftruncate   #########
#
# What architecture are we on?
#
- name: Set architecture for audit ftruncate tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_ftruncate

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/access.rules
  when: find_ftruncate.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_ftruncate.files | map(attribute='path') | list | first }}"
  when: find_ftruncate.matched > 0

- name: Inserts/replaces the ftruncate rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b32 -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_ftruncate
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80390-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030550

- name: Inserts/replaces the ftruncate rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_ftruncate
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80390-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030550
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the ftruncate rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_ftruncate
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80390-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030550

- name: Inserts/replaces the ftruncate rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_ftruncate
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80390-8
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030550
###### Record Unauthorized Access Attempts to Files (unsuccessful)  - ftruncate   #########






###### Record Unauthorized Access Attempts to Files (unsuccessful)  - openat  #########
#
# What architecture are we on?
#
- name: Set architecture for audit openat tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_openat

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/access.rules
  when: find_openat.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_openat.files | map(attribute='path') | list | first }}"
  when: find_openat.matched > 0

- name: Inserts/replaces the openat rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b32 -S openat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S openat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_openat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80387-4
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030520

- name: Inserts/replaces the openat rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S openat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S openat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_openat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80387-4
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030520
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the openat rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S openat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S openat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_openat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80387-4
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030520

- name: Inserts/replaces the openat rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S openat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S openat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_openat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80387-4
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
    - DISA-STIG-RHEL-07-030520
###### Record Unauthorized Access Attempts to Files (unsuccessful)  - openat  #########








##### Record Information on the Use of Privileged Commands ########

- name: Search for privileged commands
  shell: "find / -xdev -type f -perm -4000 -o -type f -perm -2000 2>/dev/null | cat"
  check_mode: no
  register: find_result
  tags:
    - audit_rules_privileged_commands
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27437-3
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-2(4)
    - NIST-800-53-AU-6(9)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.2
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030360

# Inserts/replaces the rule in /etc/audit/rules.d

- name: Search /etc/audit/rules.d for audit rule entries
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "^.*path={{ item }} .*$"
    patterns: "*.rules"
  with_items:
    - "{{ find_result.stdout_lines }}"
  register: files_result
  tags:
    - audit_rules_privileged_commands
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27437-3
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-2(4)
    - NIST-800-53-AU-6(9)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.2
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030360

- name: Overwrites the rule in rules.d
  lineinfile:
    path: "{{ item.1.path }}"
    line: '-a always,exit -F path={{ item.0.item }} -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: no
    regexp: "^.*path={{ item.0.item }} .*$"
  with_subelements:
    - "{{ files_result.results }}"
    - files
  tags:
    - audit_rules_privileged_commands
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27437-3
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-2(4)
    - NIST-800-53-AU-6(9)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.2
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030360

- name: Adds the rule in rules.d
  lineinfile:
    path: /etc/audit/rules.d/privileged.rules
    line: '-a always,exit -F path={{ item.item }} -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  with_items:
    - "{{ files_result.results }}"
  when: item.matched == 0
  tags:
    - audit_rules_privileged_commands
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27437-3
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-2(4)
    - NIST-800-53-AU-6(9)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.2
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030360

# Adds/overwrites the rule in /etc/audit/audit.rules

- name: Inserts/replaces the rule in audit.rules
  lineinfile:
    path: /etc/audit/audit.rules
    line: '-a always,exit -F path={{ item.item }} -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
    regexp: "^.*path={{ item.item }} .*$"
  with_items:
    - "{{ files_result.results }}"
  tags:
    - audit_rules_privileged_commands
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27437-3
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-2(4)
    - NIST-800-53-AU-6(9)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.2
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030360
##### Record Information on the Use of Privileged Commands ########







###### Record Attempts to Alter Logon and Logout Events  #########
#
# What architecture are we on?
#
- name: "[CUSTOM] Set architecture for audit shadow tasks"
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other logins audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-k logins$"
    patterns: "*.rules"
  register: find_logins

- name: "[CUSTOM] If existing logins not found, use /etc/audit/rules.d/login.rules as the recipient for the rule"
  set_fact:
    all_files:
      - /etc/audit/rules.d/logins.rules
  when: find_logins.matched == 0

- name: "[CUSTOM] Use matched file as the recipient for the rule"
  set_fact:
    all_files:
      - "{{ find_logins.files | map(attribute='path') | list | first }}"
  when: find_logins.matched > 0

- name: "[CUSTOM] Inserts/replaces the logins rule in rules.d when on x86"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
      - "-w /var/log/tallylog -p wa -k logins"
      - "-w /var/run/faillock/ -p wa -k logins"
      - "-w /var/log/lastlog -p wa -k logins"
  tags:
    - audit_rules_dac_logins
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: "[CUSTOM] Inserts/replaces the shadow rule in /etc/audit/audit.rules"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-w /etc/shadow -p wa -k audit_rules_usergroup_modification"
  tags:
    - audit_rules_dac_logins
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
###### Record Attempts to Alter Logon and Logout Events  #########






###### Ensure auditd Collects Information on Kernel Module Loading and Unloading  #########
# What architecture are we on?
#
- name: "[CUSTOM] Set architecture for audit kernel_module"
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: "[CUSTOM] Search /etc/audit/rules.d for other logins audit rules"
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-k modules$"
    patterns: "*.rules"
  register: find_modules

- name: "[CUSTOM] If existing logins not found, use /etc/audit/rules.d/modules.rules as the recipient for the rule"
  set_fact:
    all_files:
      - /etc/audit/rules.d/modules.rules
  when: find_modules.matched == 0

- name: "[CUSTOM] Use matched file as the recipient for the rule"
  set_fact:
    all_files:
      - "{{ find_logins.files | map(attribute='path') | list | first }}"
  when: find_modules.matched > 0

- name: "[CUSTOM] Inserts/replaces the kernel modules rule in rules.d when on x86"
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
      - "-w /usr/sbin/insmod -p x -k modules"
      - "-w /usr/sbin/rmmod -p x -k modules"
      - "-w /usr/sbin/modprobe -p x -k modules"
      - "-a always,exit -F arch=b32 -S init_module,delete_module -F key=modules"
  tags:
    - audit_rules_dac_kernel_modules
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: "[CUSTOM] Inserts/replaces the kernel modules rule in /etc/audit/audit.rules"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
      - "-w /usr/sbin/insmod -p x -k modules"
      - "-w /usr/sbin/rmmod -p x -k modules"
      - "-w /usr/sbin/modprobe -p x -k modules"
      - "-a always,exit -F arch=b32 -S init_module,delete_module -F key=modules"
  tags:
    - audit_rules_dac_kernel_modules
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the the kernel module in modules.rules when on x86_64"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/rules.d/modules.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S init_module,delete_module -F key=modules"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_kernel_modules
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Inserts/replaces the kernel modules rule in audit.rules when on x86_64"
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S init_module,delete_module -F key=modules"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_dac_kernel_modules
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation
###### Ensure auditd Collects Information on Kernel Module Loading and Unloading  #########







##### Enable Auditing for Processes Which Start Prior to the Audit Daemon

- name: "[CUSTOM] Correct the form of default kernel command line in GRUB"
  lineinfile:
    state: present
    dest: /etc/default/grub
    backrefs: yes
    regexp: '^(GRUB_CMDLINE_LINUX=(?!.*audit)\"[^\"]+)(\".*)'
    line: '\1 audit=1\2'
  tags:
    - audit_rules_grub
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

- name: "[CUSTOM] Correct the form of kernel command line for each installed kernel in the bootloader"
  shell: grubby --update-kernel=ALL --args="audit=1"
  tags:
    - audit_rules_grub
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation

##### Record Unauthorized Access Attempts Events to Files (unsuccessful)

- name: "[CUSTOM] Inserts/replaces the immutable rule in rules.d"
  lineinfile:
    path: "{{ item }}"
    line: "-e 2"
    create: yes
  with_items:
    - "/etc/audit/rules.d/audit.rules"
    - "/etc/audit/rules.d/immutable.rules"
  tags:
    - audit_rules_unsuccessful_file_modification_ftruncate
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - custom_remediation


##### Record Information on the Use of Privileged Commands
- name: Search for privileged commands
  shell: "find / -xdev -type f -perm -4000 -o -type f -perm -2000 2>/dev/null | cat"
  check_mode: no
  register: find_result
  tags:
    - audit_rules_privileged_commands
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27437-3
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-2(4)
    - NIST-800-53-AU-6(9)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.2
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030360

# Inserts/replaces the rule in /etc/audit/rules.d

- name: Search /etc/audit/rules.d for audit rule entries
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "^.*path={{ item }} .*$"
    patterns: "*.rules"
  with_items:
    - "{{ find_result.stdout_lines }}"
  register: files_result
  tags:
    - audit_rules_privileged_commands
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27437-3
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-2(4)
    - NIST-800-53-AU-6(9)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.2
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030360

- name: Overwrites the rule in rules.d
  lineinfile:
    path: "{{ item.1.path }}"
    line: '-a always,exit -F path={{ item.0.item }} -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: no
    regexp: "^.*path={{ item.0.item }} .*$"
  with_subelements:
    - "{{ files_result.results }}"
    - files
  tags:
    - audit_rules_privileged_commands
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27437-3
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-2(4)
    - NIST-800-53-AU-6(9)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.2
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030360

- name: Adds the rule in rules.d
  lineinfile:
    path: /etc/audit/rules.d/privileged.rules
    line: '-a always,exit -F path={{ item.item }} -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  with_items:
    - "{{ files_result.results }}"
  when: item.matched == 0
  tags:
    - audit_rules_privileged_commands
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27437-3
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-2(4)
    - NIST-800-53-AU-6(9)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.2
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030360

# Adds/overwrites the rule in /etc/audit/audit.rules

- name: Inserts/replaces the rule in audit.rules
  lineinfile:
    path: /etc/audit/audit.rules
    line: '-a always,exit -F path={{ item.item }} -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
    regexp: "^.*path={{ item.item }} .*$"
  with_items:
    - "{{ files_result.results }}"
  tags:
    - audit_rules_privileged_commands
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27437-3
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-2(4)
    - NIST-800-53-AU-6(9)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.2
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030360



######## Record Attempts to Alter Logon and Logout Events - faillock ##############
#
# What architecture are we on?
#
- name: Set architecture for audit faillock tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other user/group modification audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-k logins$"
    patterns: "*.rules"
  register: find_faillock

- name: If existing user/group modification ruleset not found, use /etc/audit/rules.d/logins.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/logins.rules
  when: find_faillock.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_faillock.files | map(attribute='path') | list | first }}"
  when: find_faillock.matched > 0

- name: Inserts/replaces the faillock rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "-w /var/run/faillock -p wa -k logins"
    create: yes
  tags:
    - audit_rules_login_events_faillock
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80383-3
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.3
    - DISA-STIG-RHEL-07-030610

#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the faillock rule in /etc/audit/audit.rules
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-w /var/run/faillock -p wa -k logins"
  tags:
    - audit_rules_login_events_faillock
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80383-3
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.3
    - DISA-STIG-RHEL-07-030610
######## Record Attempts to Alter Logon and Logout Events - faillock ##############



####### Record Any Attempts to Run seunshare ########
# Inserts/replaces the rule in /etc/audit/rules.d

- name: Search /etc/audit/rules.d for audit rule entries
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "^.*path=/usr/sbin/seunshare.*$"
    patterns: "*.rules"
  register: find_seunshare

- name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_seunshare.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_seunshare.files | map(attribute='path') | list | first }}"
  when: find_seunshare.matched > 0

- name: Inserts/replaces the seunshare rule in rules.d
  lineinfile:
    path: "{{ all_files[0] }}"
    line: '-a always,exit -F path=/usr/sbin/seunshare -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_execution_seunshare
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

# Inserts/replaces the seunshare rule in /etc/audit/audit.rules

- name: Inserts/replaces the seunshare rule in audit.rules
  lineinfile:
    path: /etc/audit/audit.rules
    line: '-a always,exit -F path=/usr/sbin/seunshare -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_execution_seunshare
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
####### Record Any Attempts to Run seunshare ########


###### Record Any Attempts to Run setfiles ########

# Inserts/replaces the rule in /etc/audit/rules.d

- name: Search /etc/audit/rules.d for audit rule entries
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "^.*path=/usr/sbin/setfiles.*$"
    patterns: "*.rules"
  register: find_setfiles

- name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_setfiles.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_setfiles.files | map(attribute='path') | list | first }}"
  when: find_setfiles.matched > 0

- name: Inserts/replaces the setfiles rule in rules.d
  lineinfile:
    path: "{{ all_files[0] }}"
    line: '-a always,exit -F path=/usr/sbin/setfiles -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_execution_setfiles
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - DISA-STIG-RHEL-07-030590

# Inserts/replaces the setfiles rule in /etc/audit/audit.rules

- name: Inserts/replaces the setfiles rule in audit.rules
  lineinfile:
    path: /etc/audit/audit.rules
    line: '-a always,exit -F path=/usr/sbin/setfiles -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_execution_setfiles
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - DISA-STIG-RHEL-07-030590
###### Record Any Attempts to Run setfiles ########

# Inserts/replaces the rule in /etc/audit/rules.d

- name: Search /etc/audit/rules.d for audit rule entries
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "^.*path=/usr/sbin/setsebool.*$"
    patterns: "*.rules"
  register: find_setsebool

- name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_setsebool.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_setsebool.files | map(attribute='path') | list | first }}"
  when: find_setsebool.matched > 0

- name: Inserts/replaces the setsebool rule in rules.d
  lineinfile:
    path: "{{ all_files[0] }}"
    line: '-a always,exit -F path=/usr/sbin/setsebool -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_execution_setsebool
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80392-4
    - NIST-800-53-AU-12(c)
    - NIST-800-171-3.1.7
    - DISA-STIG-RHEL-07-030570

# Inserts/replaces the setsebool rule in /etc/audit/audit.rules

- name: Inserts/replaces the setsebool rule in audit.rules
  lineinfile:
    path: /etc/audit/audit.rules
    line: '-a always,exit -F path=/usr/sbin/setsebool -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_execution_setsebool
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80392-4
    - NIST-800-53-AU-12(c)
    - NIST-800-171-3.1.7
    - DISA-STIG-RHEL-07-030570

###### Record Any Attempts to Run setsebool #######

###### Record Any Attempts to Run semanage ########
# Inserts/replaces the rule in /etc/audit/rules.d

- name: Search /etc/audit/rules.d for audit rule entries
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "^.*path=/usr/sbin/semanage.*$"
    patterns: "*.rules"
  register: find_semanage

- name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_semanage.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_semanage.files | map(attribute='path') | list | first }}"
  when: find_semanage.matched > 0

- name: Inserts/replaces the semanage rule in rules.d
  lineinfile:
    path: "{{ all_files[0] }}"
    line: '-a always,exit -F path=/usr/sbin/semanage -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_execution_semanage
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80391-6
    - NIST-800-53-AU-12(c)
    - NIST-800-171-3.1.7
    - DISA-STIG-RHEL-07-030560

# Inserts/replaces the semanage rule in /etc/audit/audit.rules

- name: Inserts/replaces the semanage rule in audit.rules
  lineinfile:
    path: /etc/audit/audit.rules
    line: '-a always,exit -F path=/usr/sbin/semanage -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_execution_semanage
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80391-6
    - NIST-800-53-AU-12(c)
    - NIST-800-171-3.1.7
    - DISA-STIG-RHEL-07-030560
###### Record Any Attempts to Run semanage ########



##### Record Any Attempts to Run chcon ########
# Inserts/replaces the rule in /etc/audit/rules.d

- name: Search /etc/audit/rules.d for audit rule entries
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "^.*path=/usr/bin/chcon.*$"
    patterns: "*.rules"
  register: find_chcon

- name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_chcon.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_chcon.files | map(attribute='path') | list | first }}"
  when: find_chcon.matched > 0

- name: Inserts/replaces the chcon rule in rules.d
  lineinfile:
    path: "{{ all_files[0] }}"
    line: '-a always,exit -F path=/usr/bin/chcon -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_execution_chcon
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80393-2
    - NIST-800-53-AU-12(c)
    - NIST-800-171-3.1.7
    - DISA-STIG-RHEL-07-030580

# Inserts/replaces the chcon rule in /etc/audit/audit.rules

- name: Inserts/replaces the chcon rule in audit.rules
  lineinfile:
    path: /etc/audit/audit.rules
    line: '-a always,exit -F path=/usr/bin/chcon -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_execution_chcon
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80393-2
    - NIST-800-53-AU-12(c)
    - NIST-800-171-3.1.7
    - DISA-STIG-RHEL-07-030580
##### Record Any Attempts to Run chcon ########


###### Record Any Attempts to Run restorecon ########
# Inserts/replaces the rule in /etc/audit/rules.d

- name: Search /etc/audit/rules.d for audit rule entries
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "^.*path=/usr/sbin/restorecon.*$"
    patterns: "*.rules"
  register: find_restorecon

- name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_restorecon.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_restorecon.files | map(attribute='path') | list | first }}"
  when: find_restorecon.matched > 0

- name: Inserts/replaces the restorecon rule in rules.d
  lineinfile:
    path: "{{ all_files[0] }}"
    line: '-a always,exit -F path=/usr/sbin/restorecon -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_execution_restorecon
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80394-0
    - NIST-800-53-AU-12(c)
    - NIST-800-171-3.1.7

# Inserts/replaces the restorecon rule in /etc/audit/audit.rules

- name: Inserts/replaces the restorecon rule in audit.rules
  lineinfile:
    path: /etc/audit/audit.rules
    line: '-a always,exit -F path=/usr/sbin/restorecon -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_execution_restorecon
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80394-0
    - NIST-800-53-AU-12(c)
    - NIST-800-171-3.1.7
###### Record Any Attempts to Run restorecon ########


####### Ensure auditd Collects Information on the Use of Privileged Commands - newgidmap ########

# Inserts/replaces the rule in /etc/audit/rules.d

- name: Search /etc/audit/rules.d for audit rule entries
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "^.*path=/usr/bin/newgidmap.*$"
    patterns: "*.rules"
  register: find_newgidmap

- name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_newgidmap.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_newgidmap.files | map(attribute='path') | list | first }}"
  when: find_newgidmap.matched > 0

- name: Inserts/replaces the newgidmap rule in rules.d
  lineinfile:
    path: "{{ all_files[0] }}"
    line: '-a always,exit -F path=/usr/bin/newgidmap -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_privileged_commands_newgidmap
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

# Inserts/replaces the newgidmap rule in /etc/audit/audit.rules

- name: Inserts/replaces the newgidmap rule in audit.rules
  lineinfile:
    path: /etc/audit/audit.rules
    line: '-a always,exit -F path=/usr/bin/newgidmap -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_privileged_commands_newgidmap
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
####### Ensure auditd Collects Information on the Use of Privileged Commands - newgidmap ########


####### Ensure auditd Collects Information on the Use of Privileged Commands - pt_chown ########


# Inserts/replaces the rule in /etc/audit/rules.d

- name: Search /etc/audit/rules.d for audit rule entries
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "^.*path=/usr/libexec/pt_chown.*$"
    patterns: "*.rules"
  register: find_pt_chown

- name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_pt_chown.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_pt_chown.files | map(attribute='path') | list | first }}"
  when: find_pt_chown.matched > 0

- name: Inserts/replaces the pt_chown rule in rules.d
  lineinfile:
    path: "{{ all_files[0] }}"
    line: '-a always,exit -F path=/usr/libexec/pt_chown -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_privileged_commands_pt_chown
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80409-6
    - NIST-800-53-AU-3(1)
    - NIST-800-53-AU-12(c)
    - NIST-800-171-3.1.7

# Inserts/replaces the pt_chown rule in /etc/audit/audit.rules

- name: Inserts/replaces the pt_chown rule in audit.rules
  lineinfile:
    path: /etc/audit/audit.rules
    line: '-a always,exit -F path=/usr/libexec/pt_chown -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_privileged_commands_pt_chown
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80409-6
    - NIST-800-53-AU-3(1)
    - NIST-800-53-AU-12(c)
    - NIST-800-171-3.1.7
####### Ensure auditd Collects Information on the Use of Privileged Commands - pt_chown ########


####### Ensure auditd Collects Information on the Use of Privileged Commands - sudoedit ########
# Inserts/replaces the rule in /etc/audit/rules.d

- name: Search /etc/audit/rules.d for audit rule entries
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "^.*path=/usr/bin/sudoedit.*$"
    patterns: "*.rules"
  register: find_sudoedit

- name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_sudoedit.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_sudoedit.files | map(attribute='path') | list | first }}"
  when: find_sudoedit.matched > 0

- name: Inserts/replaces the sudoedit rule in rules.d
  lineinfile:
    path: "{{ all_files[0] }}"
    line: '-a always,exit -F path=/usr/bin/sudoedit -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_privileged_commands_sudoedit
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80402-1
    - NIST-800-53-AU-3(1)
    - NIST-800-53-AU-12(c)
    - NIST-800-171-3.1.7
    - DISA-STIG-RHEL-07-030730

# Inserts/replaces the sudoedit rule in /etc/audit/audit.rules

- name: Inserts/replaces the sudoedit rule in audit.rules
  lineinfile:
    path: /etc/audit/audit.rules
    line: '-a always,exit -F path=/usr/bin/sudoedit -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_privileged_commands_sudoedit
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-80402-1
    - NIST-800-53-AU-3(1)
    - NIST-800-53-AU-12(c)
    - NIST-800-171-3.1.7
    - DISA-STIG-RHEL-07-030730
####### Ensure auditd Collects Information on the Use of Privileged Commands - sudoedit ########


###### Ensure auditd Collects Information on the Use of Privileged Commands - newuidmap ########
# Inserts/replaces the rule in /etc/audit/rules.d

- name: Search /etc/audit/rules.d for audit rule entries
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "^.*path=/usr/bin/newuidmap.*$"
    patterns: "*.rules"
  register: find_newuidmap

- name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/privileged.rules
  when: find_newuidmap.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_newuidmap.files | map(attribute='path') | list | first }}"
  when: find_newuidmap.matched > 0

- name: Inserts/replaces the newuidmap rule in rules.d
  lineinfile:
    path: "{{ all_files[0] }}"
    line: '-a always,exit -F path=/usr/bin/newuidmap -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_privileged_commands_newuidmap
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

# Inserts/replaces the newuidmap rule in /etc/audit/audit.rules

- name: Inserts/replaces the newuidmap rule in audit.rules
  lineinfile:
    path: /etc/audit/audit.rules
    line: '-a always,exit -F path=/usr/bin/newuidmap -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  tags:
    - audit_rules_privileged_commands_newuidmap
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
###### Ensure auditd Collects Information on the Use of Privileged Commands - newuidmap ########


###### Ensure auditd Collects Information on the Use of Privileged Commands ########
- name: Search for privileged commands
  shell: "find / -xdev -type f -perm -4000 -o -type f -perm -2000 2>/dev/null | cat"
  check_mode: no
  register: find_result
  tags:
    - audit_rules_privileged_commands
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27437-3
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-2(4)
    - NIST-800-53-AU-6(9)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.2
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030360

# Inserts/replaces the rule in /etc/audit/rules.d

- name: Search /etc/audit/rules.d for audit rule entries
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "^.*path={{ item }} .*$"
    patterns: "*.rules"
  with_items:
    - "{{ find_result.stdout_lines }}"
  register: files_result
  tags:
    - audit_rules_privileged_commands
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27437-3
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-2(4)
    - NIST-800-53-AU-6(9)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.2
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030360

- name: Overwrites the rule in rules.d
  lineinfile:
    path: "{{ item.1.path }}"
    line: '-a always,exit -F path={{ item.0.item }} -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: no
    regexp: "^.*path={{ item.0.item }} .*$"
  with_subelements:
    - "{{ files_result.results }}"
    - files
  tags:
    - audit_rules_privileged_commands
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27437-3
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-2(4)
    - NIST-800-53-AU-6(9)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.2
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030360

- name: Adds the rule in rules.d
  lineinfile:
    path: /etc/audit/rules.d/privileged.rules
    line: '-a always,exit -F path={{ item.item }} -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
  with_items:
    - "{{ files_result.results }}"
  when: item.matched == 0
  tags:
    - audit_rules_privileged_commands
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27437-3
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-2(4)
    - NIST-800-53-AU-6(9)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.2
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030360

# Adds/overwrites the rule in /etc/audit/audit.rules

- name: Inserts/replaces the rule in audit.rules
  lineinfile:
    path: /etc/audit/audit.rules
    line: '-a always,exit -F path={{ item.item }} -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
    create: yes
    regexp: "^.*path={{ item.item }} .*$"
  with_items:
    - "{{ files_result.results }}"
  tags:
    - audit_rules_privileged_commands
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - CCE-27437-3
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-2(4)
    - NIST-800-53-AU-6(9)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.2
    - CJIS-5.4.1.1
    - DISA-STIG-RHEL-07-030360
###### Ensure auditd Collects Information on the Use of Privileged Commands ########



###### Record Unsuccessul Delete Attempts to Files - renameat ########

#
# What architecture are we on?
#
- name: Set architecture for audit renameat tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_renameat

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/access.rules
  when: find_renameat.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_renameat.files | map(attribute='path') | list | first }}"
  when: find_renameat.matched > 0

- name: Inserts/replaces the renameat rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b32 -S renameat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S renameat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_renameat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1

- name: Inserts/replaces the renameat rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S renameat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S renameat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_renameat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the renameat rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S renameat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S renameat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_renameat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1

- name: Inserts/replaces the renameat rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S renameat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S renameat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_renameat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
###### Record Unsuccessul Delete Attempts to Files - renameat ########

###### Record Unsuccessul Delete Attempts to Files - chmod ########

#
# What architecture are we on?
#
- name: Set architecture for audit chmod tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_chmod

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/access.rules
  when: find_chmod.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_chmod.files | map(attribute='path') | list | first }}"
  when: find_chmod.matched > 0

- name: Inserts/replaces the chmod rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b32 -S chmod -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S chmod -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_chmod
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the chmod rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S chmod -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S chmod -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_chmod
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the chmod rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S chmod -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S chmod -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_chmod
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the chmod rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S chmod -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S chmod -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_chmod
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
###### Record Unsuccessul Delete Attempts to Files - chmod ########



###### Record Unsuccessul Delete Attempts to Files - fchownat ########

#
# What architecture are we on?
#
- name: Set architecture for audit fchownat tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_fchownat

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/access.rules
  when: find_fchownat.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_fchownat.files | map(attribute='path') | list | first }}"
  when: find_fchownat.matched > 0

- name: Inserts/replaces the fchownat rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b32 -S fchownat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S fchownat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_fchownat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the fchownat rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S fchownat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S fchownat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_fchownat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the fchownat rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S fchownat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S fchownat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_fchownat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the fchownat rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S fchownat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S fchownat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_fchownat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
###### Record Unsuccessul Delete Attempts to Files - fchownat ########


######## Record Unsuccessul Ownership Changes to Files - lchown ########
#
# What architecture are we on?
#
- name: Set architecture for audit lchown tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_lchown

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/access.rules
  when: find_lchown.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_lchown.files | map(attribute='path') | list | first }}"
  when: find_lchown.matched > 0

- name: Inserts/replaces the lchown rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b32 -S lchown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S lchown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_lchown
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the lchown rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S lchown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S lchown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_lchown
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the lchown rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S lchown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S lchown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_lchown
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the lchown rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S lchown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S lchown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_lchown
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
######## Record Unsuccessul Ownership Changes to Files - lchown ########

######## Record Unsuccessul Permission Changes to Files - removexattr ########
#
# What architecture are we on?
#
- name: Set architecture for audit removexattr tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_removexattr

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/access.rules
  when: find_removexattr.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_removexattr.files | map(attribute='path') | list | first }}"
  when: find_removexattr.matched > 0

- name: Inserts/replaces the removexattr rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b32 -S removexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S removexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_removexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the removexattr rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S removexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S removexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_removexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the removexattr rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S removexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S removexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_removexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the removexattr rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S removexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S removexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_removexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
######## Record Unsuccessul Permission Changes to Files - removexattr ########

######## Record Unsuccessul Ownership Changes to Files - chown ########
#
# What architecture are we on?
#
- name: Set architecture for audit chown tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_chown

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/access.rules
  when: find_chown.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_chown.files | map(attribute='path') | list | first }}"
  when: find_chown.matched > 0

- name: Inserts/replaces the chown rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b32 -S chown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S chown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_chown
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the chown rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S chown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S chown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_chown
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the chown rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S chown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S chown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_chown
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the chown rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S chown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S chown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_chown
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
######## Record Unsuccessul Ownership Changes to Files - chown ########



######## Record Unsuccessul Ownership Changes to Files - fchown ########
#
# What architecture are we on?
#
- name: Set architecture for audit fchown tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_fchown

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/access.rules
  when: find_fchown.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_fchown.files | map(attribute='path') | list | first }}"
  when: find_fchown.matched > 0

- name: Inserts/replaces the fchown rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b32 -S fchown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S fchown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_fchown
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the fchown rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S fchown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S fchown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_fchown
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the fchown rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S fchown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S fchown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_fchown
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the fchown rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S fchown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S fchown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_fchown
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
######## Record Unsuccessul Ownership Changes to Files - fchown ########


######## Record Unsuccessul Ownership Changes to Files - fchmodat ########
#
# What architecture are we on?
#
- name: Set architecture for audit fchmodat tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_fchmodat

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/access.rules
  when: find_fchmodat.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_fchmodat.files | map(attribute='path') | list | first }}"
  when: find_fchmodat.matched > 0

- name: Inserts/replaces the fchmodat rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b32 -S fchmodat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S fchmodat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_fchmodat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the fchmodat rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S fchmodat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S fchmodat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_fchmodat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the fchmodat rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S fchmodat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S fchmodat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_fchmodat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the fchmodat rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S fchmodat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S fchmodat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_fchmodat
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
######## Record Unsuccessul Ownership Changes to Files - fchmodat ########


######## Record Unsuccessul Ownership Changes to Files - setxattr ########
#
# What architecture are we on?
#
- name: Set architecture for audit setxattr tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_setxattr

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/access.rules
  when: find_setxattr.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_setxattr.files | map(attribute='path') | list | first }}"
  when: find_setxattr.matched > 0

- name: Inserts/replaces the setxattr rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b32 -S setxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S setxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_setxattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the setxattr rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S setxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S setxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_setxattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the setxattr rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S setxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S setxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_setxattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the setxattr rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S setxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S setxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_setxattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
######## Record Unsuccessul Ownership Changes to Files - setxattr ########



######## Record Unsuccessul Ownership Changes to Files - lremovexattr ########

#
# What architecture are we on?
#
- name: Set architecture for audit fremovexattr tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_fremovexattr

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/access.rules
  when: find_fremovexattr.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_fremovexattr.files | map(attribute='path') | list | first }}"
  when: find_fremovexattr.matched > 0

- name: Inserts/replaces the fremovexattr rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b32 -S fremovexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S fremovexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_fremovexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the fremovexattr rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S fremovexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S fremovexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_fremovexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the fremovexattr rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S fremovexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S fremovexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_fremovexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the fremovexattr rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S fremovexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S fremovexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_fremovexattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
######## Record Unsuccessul Ownership Changes to Files - lremovexattr ########


######## Record Unsuccessul Delete Attempts to Files - unlink ########

#
# What architecture are we on?
#
- name: Set architecture for audit unlink tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_unlink

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/access.rules
  when: find_unlink.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_unlink.files | map(attribute='path') | list | first }}"
  when: find_unlink.matched > 0

- name: Inserts/replaces the unlink rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b32 -S unlink -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S unlink -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_unlink
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1

- name: Inserts/replaces the unlink rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S unlink -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S unlink -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_unlink
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the unlink rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S unlink -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S unlink -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_unlink
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1

- name: Inserts/replaces the unlink rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S unlink -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S unlink -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_unlink
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
    - NIST-800-53-AC-17(7)
    - NIST-800-53-AU-1(b)
    - NIST-800-53-AU-2(a)
    - NIST-800-53-AU-2(c)
    - NIST-800-53-AU-2(d)
    - NIST-800-53-AU-12(a)
    - NIST-800-53-AU-12(c)
    - NIST-800-53-IR-5
    - NIST-800-171-3.1.7
    - PCI-DSS-Req-10.2.4
    - PCI-DSS-Req-10.2.1
######## Record Unsuccessul Delete Attempts to Files - unlink ########


######## Record Unsuccessul Delete Attempts to Files - fsetxattr ########
#
# What architecture are we on?
#
- name: Set architecture for audit fsetxattr tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_fsetxattr

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/access.rules
  when: find_fsetxattr.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_fsetxattr.files | map(attribute='path') | list | first }}"
  when: find_fsetxattr.matched > 0

- name: Inserts/replaces the fsetxattr rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b32 -S fsetxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S fsetxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_fsetxattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the fsetxattr rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S fsetxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S fsetxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_fsetxattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the fsetxattr rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S fsetxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S fsetxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_fsetxattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the fsetxattr rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S fsetxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S fsetxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_fsetxattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
######## Record Unsuccessul Delete Attempts to Files - fsetxattr ########



######## Record Unsuccessul Permission Changes to Files - lsetxattr ########
#
# What architecture are we on?
#
- name: Set architecture for audit lsetxattr tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

#
# Inserts/replaces the rule in /etc/audit/rules.d
#
- name: Search /etc/audit/rules.d for other DAC audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "-F key=perm_mod$"
    patterns: "*.rules"
  register: find_lsetxattr

- name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/access.rules
  when: find_lsetxattr.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_lsetxattr.files | map(attribute='path') | list | first }}"
  when: find_lsetxattr.matched > 0

- name: Inserts/replaces the lsetxattr rule in rules.d when on x86
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b32 -S lsetxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S lsetxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_lsetxattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the lsetxattr rule in rules.d when on x86_64
  lineinfile:
    path: "{{ all_files[0] }}"
    line: "{{ item }}"
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S lsetxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S lsetxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_lsetxattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
#
# Inserts/replaces the rule in /etc/audit/audit.rules
#
- name: Inserts/replaces the lsetxattr rule in /etc/audit/audit.rules when on x86
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
  with_items:
    - "-a always,exit -F arch=b32 -S lsetxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b32 -S lsetxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  tags:
    - audit_rules_unsuccessful_file_modification_lsetxattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption

- name: Inserts/replaces the lsetxattr rule in audit.rules when on x86_64
  lineinfile:
    line: "{{ item }}"
    state: present
    dest: /etc/audit/audit.rules
    create: yes
  with_items:
    - "-a always,exit -F arch=b64 -S lsetxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
    - "-a always,exit -F arch=b64 -S lsetxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
  when: audit_arch == 'b64'
  tags:
    - audit_rules_unsuccessful_file_modification_lsetxattr
    - medium_severity
    - restrict_strategy
    - low_complexity
    - low_disruption
######## Record Unsuccessul Permission Changes to Files - lsetxattr ########
